{"version":3,"sources":["Assignment/datafetch.js","App.js","reportWebVitals.js","index.js"],"names":["options","value","label","Datafetch","useState","data","setData","input","setInput","count","setCount","status","setStatus","arr","useEffect","axios","get","then","response","push","string","type","console","log","className","classname","scope","activity","trigger","onChange","e","target","class","charAt","toUpperCase","substring","classn","participants","link","href","isdisabled","placeholder","selectedOption","id","onClick","Math","random","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAUMA,EAAU,CAEZ,CAAEC,MAAO,YAAaC,MAAO,aAC7B,CAAED,MAAO,gBAAiBC,MAAO,mBA8FtBC,EAzFG,WAAO,IAAD,EAECC,mBAAS,IAFV,mBAEbC,EAFa,KAERC,EAFQ,OAGGF,mBAAS,IAHZ,mBAGbG,EAHa,KAGPC,EAHO,OAIGJ,mBAAS,GAJZ,mBAIbK,EAJa,KAIPC,EAJO,OAKMN,mBAAS,KAAKJ,GALpB,mBAKbW,EALa,KAKNC,EALM,KAOpBC,EAAI,GACJC,qBAAU,WACN,OACFC,IAAMC,IAAI,0CACPC,MAAK,SAACC,GACHZ,EAAQY,EAASb,MACjBQ,EAAIM,KAAKD,EAASb,WAIvB,CAACI,IACJ,IAIAW,EAAM,UAAKf,EAAKgB,MAGpBC,QAAQC,IAAIV,GAKR,OAEI,sBAAKW,UAAU,aAAf,UACE,8CACU,gCACA,kCACI,+BACI,oBAAIC,UAAU,YAAYC,MAAM,MAAhC,uBACE,6BAAKrB,EAAKsB,cAEhB,+BACK,oBAAIF,UAAU,YAAYC,MAAM,MAAhC,yBAED,qCAAQnB,EAAR,IAAe,cAAC,IAAD,CAAaiB,UAAU,QAAOI,QAAQ,kBAAtC,SACV,uBAAO3B,MAAOM,EAAOsB,SAAU,SAACC,GAAKtB,EAASsB,EAAEC,OAAO9B,QAASuB,UAAU,QAAOH,KAAK,iBAI/F,+BACI,oBAAIW,MAAM,YAAYN,MAAM,MAA5B,oBACE,6BACEN,EAAOa,OAAO,GAAGC,cAAcd,EAAOe,UAAU,QAGxD,+BACK,oBAAIC,OAAO,YAAYV,MAAM,MAA7B,0BACC,6BAAKrB,EAAKgC,kBAEjB,+BACM,oBAAIL,MAAM,YAAYN,MAAM,MAA5B,kBACA,mCAAMrB,EAAKiC,KAAK,mBAAGC,KAAMlC,EAAKiC,KAAd,wBAAmC,0DAEzD,+BACK,oBAAIN,MAAM,YAAYN,MAAM,MAA5B,oBAED,cAAC,IAAD,CACGc,YAAU,EACTC,YAAY,OACbxC,MAAOU,EACPkB,SA3CL,SAAAa,GAClB9B,EAAW8B,IA2CY1C,QAASA,YAUrC,wBAAQ2C,GAAG,cAAanB,UAAU,oBAAmBoB,QA9DtC,WACTlC,EAASmC,KAAKC,WA6DpB,6BAA8F,2BCpFjFC,MATf,WACE,OACE,qBAAKvB,UAAU,MAAf,SACC,cAAC,EAAD,OCIUwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.dc46f6f7.chunk.js","sourcesContent":["import React,{useState,useEffect}from 'react'\r\nimport Select from 'react-select'\r\nimport axios from \"axios\"\r\nimport Collapsible from 'react-collapsible';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './style.css';\r\nimport PageNotFound from './PageNotFound';\r\n\r\n\r\n\r\nconst options = [\r\n\r\n    { value: 'completed', label: 'Completed' },\r\n    { value: 'notInterested', label: 'Not Interested' },\r\n  ];\r\n\r\n\r\n\r\nconst Datafetch = () => {\r\n\r\n    const [data,setData]=useState([]);\r\n    const [input,setInput]=useState(\"\");\r\n    const [count,setCount]=useState(0);\r\n    const [status,setStatus] =useState(null,options);\r\n\r\nvar arr=[];\r\n    useEffect(() => {\r\n        return(\r\n      axios.get(\"https://www.boredapi.com/api/activity/\")\r\n        .then((response) => {\r\n            setData(response.data);\r\n            arr.push(response.data);\r\n         \r\n         \r\n        })\r\n    )},[count]);\r\n    const change=()=>{\r\n        setCount(Math.random());\r\n    }\r\n\r\nlet string =`${data.type}`;\r\n\r\n  \r\nconsole.log(arr);\r\n    const handleChange = selectedOption => {\r\n       setStatus( selectedOption );\r\n      \r\n     };\r\n    return (\r\n        \r\n        <div className=\"containers\">\r\n          <h1>Krishna Kant</h1>\r\n                    <table >\r\n                    <tbody >\r\n                        <tr>\r\n                            <th classname=\"tablehead\" scope=\"row\"> Activity</th>\r\n                              <td>{data.activity}</td>\r\n                        </tr>\r\n                        <tr>\r\n                             <th classname=\"tablehead\" scope=\"row\">Description</th>\r\n                         \r\n                            <td>   {input} <Collapsible className=\"colla\"trigger=\"Add Description\">\r\n                                 <input value={input} onChange={(e)=>{setInput(e.target.value)}} className=\"input\"type=\"text\"></input>\r\n                          </Collapsible>\r\n</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th class=\"tablehead\" scope=\"row\"> Type </th>\r\n                              <td> \r\n                              { string.charAt(0).toUpperCase()+string.substring(1)}\r\n    </td>\r\n                        </tr>\r\n                        <tr>\r\n                             <th classn=\"tablehead\" scope=\"row\">Participants</th>\r\n                              <td>{data.participants}</td>\r\n                        </tr>\r\n                       <tr>\r\n                             <th class=\"tablehead\" scope=\"row\">Link</th>\r\n                             <td> {data.link?<a href={data.link}>Visit Site</a>:<span>Link Unavailable</span>}</td> \r\n                       </tr>\r\n                       <tr>\r\n                            <th class=\"tablehead\" scope=\"row\">Status</th>\r\n                    \r\n                           <Select\r\n                              isdisabled\r\n                               placeholder=\"None\"\r\n                              value={status}\r\n                              onChange={handleChange}\r\n                              options={options}\r\n              />\r\n           \r\n                       \r\n                       </tr>\r\n          </tbody>\r\n          </table>\r\n\r\n               \r\n          \r\n  <button id=\"fetchbutton\"className=\"btn btn-secondary\"onClick={change}>Random Activity</button><br/>\r\n  \r\n\r\n        </div>\r\n\r\n        \r\n    )\r\n}\r\n\r\nexport default Datafetch\r\n","\nimport './App.css';\nimport Datafetch from './Assignment/datafetch';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Datafetch />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}